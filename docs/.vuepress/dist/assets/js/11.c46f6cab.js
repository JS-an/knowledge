(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{362:function(s,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"git-命令官网"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-命令官网"}},[s._v("#")]),s._v(" Git 命令官网")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[s._v("文档地址"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"github-部署-vuepress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github-部署-vuepress"}},[s._v("#")]),s._v(" GitHub 部署 VuePress")]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://vuepress.vuejs.org/zh/guide/deploy.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("引用 VuePress 官网"),a("OutboundLink")],1)])]),s._v(" "),a("ol",[a("li",[s._v("下述的指南基于以下条件：")])]),s._v(" "),a("ul",[a("li",[s._v("文档放置在项目的 docs 目录中；")]),s._v(" "),a("li",[s._v("使用的是默认的构建输出位置；")]),s._v(" "),a("li",[s._v("VuePress 以本地依赖的形式被安装到你的项目中，并且配置了如下的 npm scripts:")])]),s._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"docs:build"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vuepress build docs"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[s._v("在 "),a("code",[s._v("docs/.vuepress/config.js")]),s._v(" 中设置正确的 base。")]),s._v(" "),a("p",[s._v("如果你打算发布到 "),a("code",[s._v("https://<USERNAME>.github.io/")]),s._v("，则可以省略这一步，因为 "),a("code",[s._v("base")]),s._v(" 默认即是 "),a("code",[s._v('"/"')]),s._v("。")]),s._v(" "),a("p",[s._v("如果你打算发布到 "),a("code",[s._v("https://<USERNAME>.github.io/<REPO>/")]),s._v("（也就是说你的仓库在 "),a("code",[s._v("https://github.com/<USERNAME>/<REPO>")]),s._v("），则将 "),a("code",[s._v("base")]),s._v(" 设置为 "),a("code",[s._v('"/<REPO>/"')]),s._v("。")])]),s._v(" "),a("li",[a("p",[s._v("在你的项目中，创建一个如下的 "),a("code",[s._v("deploy.sh")]),s._v(" 文件（请自行判断需要的注释）:")])])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 确保脚本抛出遇到的错误")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -e\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成静态文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run docs:build\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入生成的文件夹")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" docs/.vuepress/dist\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果是发布到自定义域名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 'www.example.com' > CNAME")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -A\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'deploy'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果发布到 https://<USERNAME>.github.io")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果发布到 https://<USERNAME>.github.io/<REPO>")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" -\n")])])]),a("h2",{attrs:{id:"git-报错"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-报错"}},[s._v("#")]),s._v(" Git 报错")]),s._v(" "),a("h3",{attrs:{id:"setting-certificate-verify-locations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setting-certificate-verify-locations"}},[s._v("#")]),s._v(" setting certificate verify locations")]),s._v(" "),a("ul",[a("li",[s._v("修改正确路径")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --system http.sslcainfo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C:\\Program Files (x86)\\git'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\b"}},[s._v("\\b")]),s._v("in"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\c"}},[s._v("\\c")]),s._v('url-ca-bundle.crt"')]),s._v("\n")])])]),a("p",[s._v("或")]),s._v(" "),a("ul",[a("li",[s._v("忽略 SSL 验证")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --system http.sslverify "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n")])])]),a("h2",{attrs:{id:"git-配置多个账号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-配置多个账号"}},[s._v("#")]),s._v(" Git 配置多个账号")]),s._v(" "),a("ul",[a("li",[s._v("配置多个 Git 账号的原因")])]),s._v(" "),a("p",[s._v("比如已经配置 GitHub 账号，在 Gitee 有另一个账号，将代码发布到 Gitee 上会报错，因此需要配置多个 git 账号。")]),s._v(" "),a("ul",[a("li",[s._v("配置多个 Git 账号的方法")])]),s._v(" "),a("ol",[a("li",[a("code",[s._v("git config --list")]),s._v(" 查看全局配置")]),s._v(" "),a("li",[s._v("移除 Git 全局配置")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移除全局账户")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global --unset user.name\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移除全局邮箱")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global --unset user.email\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移除全局密码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global --unset user.password\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("生成 SSH KEY："),a("code",[s._v('ssh-keygen -t rsa -C "邮箱地址"')])]),s._v(" "),a("li",[s._v("登录代码平台，进入 Settings - SSH and GPG keys，将 pub 里的密钥配置进去")]),s._v(" "),a("li",[s._v("查看密钥是否生效: 例如 git 平台"),a("code",[s._v("ssh -T git@github.com")]),s._v(" "),a("blockquote",[a("p",[s._v("多个账号重复 3，4，5 步骤")])])]),s._v(" "),a("li",[s._v("在.ssh 下新建 config 文件，进行配置")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置说明")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Host    　　主机别名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# HostName　　服务器真实地址")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# PreferredAuthentications　　认证方式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# IdentityFile　　私钥路径")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# User　　用户名")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置gitee")]),s._v("\n  Host gitee.com\n  HostName gitee.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_allen1\n  User allen1\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置github")]),s._v("\n  Host github.com\n  HostName github.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_allen2\n  User allen2\n")])])]),a("ol",{attrs:{start:"7"}},[a("li",[s._v("为各仓库单独配置用户名和邮箱")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"用户名"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"邮箱"')]),s._v("\n")])])]),a("ul",[a("li",[s._v("ps:如果原来使用 HTTPS，则需修改远程仓库地址")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" origin\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" origin git@user.github.com:用户名/仓库名.git\n")])])]),a("h2",{attrs:{id:"git-提交时不需要密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-提交时不需要密码"}},[s._v("#")]),s._v(" Git 提交时不需要密码")]),s._v(" "),a("ul",[a("li",[s._v("情况一")])]),s._v(" "),a("ol",[a("li",[s._v("用 SSH 克隆(clone)下来的配置好无密码公钥则不需输入密码")]),s._v(" "),a("li",[s._v("命令行工具输入"),a("code",[s._v('ssh-keygen -t rsa -C "邮箱地址"')])]),s._v(" "),a("li")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" to save the key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("/home/schacon/.ssh/id_rsa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":（公钥文件名称）\nCreated directory "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/home/schacon/.ssh'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\nEnter passphrase "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("empty "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" no passphrase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("不需密码则回车留空"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nEnter same passphrase again:（如上）\nYour identification has been saved "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" /home/schacon/.ssh/id_rsa.\nYour public key has been saved "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" /home/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\nd0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local\n")])])]),a("ul",[a("li",[s._v("情况二")])]),s._v(" "),a("ol",[a("li",[s._v("用 HTTPS 克隆(clone)下来的需输入密码，但是可以缓存密码，自动输入")]),s._v(" "),a("li",[s._v("设置"),a("code",[s._v("credential helper")]),a("br"),s._v("\n凭据可以设置为全局，也可以设置当前项目下起作用。"),a("br"),s._v("\n如果设置全局，则："),a("br"),s._v(" "),a("code",[s._v("git config –global credential.helper store –file=git_credentails.")]),s._v("\n如果设置当前项目，则进入项目代码目录下，运行："),a("br"),s._v(" "),a("code",[s._v("git config credential.helper store –file=.git_credentails.")]),s._v("\n上面的–file=.git-credentials 表示用户名密码存储的文件位置。")])]),s._v(" "),a("ul",[a("li",[s._v("情况三")])]),s._v(" "),a("ol",[a("li",[s._v("在本地 git 库目录终端下，输入以下代码，输出所匹配的远程库。")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote -v\n")])])]),a("p",[s._v("如果使用的是 https 替换为 ssh 方式即可")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote set-url origin git@github.com:name/repo\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("在目标终端下，按照如下命令行重新添加私钥")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("ssh-add ~/.ssh/id_rsa\n")])])]),a("blockquote",[a("p",[s._v("~/.ssh/id_rsa 为 bash 路径下的.ssh 文件夹中的 id_rsa 文件（id_rsa 具体为密钥文件名，需用哪个密钥就改为哪个）\n在执行"),a("code",[s._v("ssh-add ~/.ssh/id_rsa")]),s._v("时发生 Could not open a connection to your authentication agent 错误，\n执行如下命令"),a("code",[s._v("ssh-agent bash")]),s._v("\n然后再执行"),a("code",[s._v("ssh-add ~/.ssh/id_rsa")]),s._v("即可")])]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[s._v("添加成功后，重新尝试是否可以 push 和 pull")])]),s._v(" "),a("h2",{attrs:{id:"git-提交-pr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-提交-pr"}},[s._v("#")]),s._v(" Git 提交 PR")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("fork 别人的仓库：不可能直接在别人的代码仓库中直接修改代码，你也没有这个权限，因此你可以 fork 一份（相当于单独复制一个分叉出来）到你自己名下的一个仓库中")])]),s._v(" "),a("li",[a("p",[s._v("将代码 clone 到本地：代码通常是在开发者本地修改和调试的不可能直接在远程的仓库上开发，因此需要将你 fork 的代码下载到本地。这里的术语是 git clone（复制一份）到本地")])]),s._v(" "),a("li",[a("p",[s._v("设置 remote : "),a("code",[s._v("git remote add upstream https://xxx.com/xxx/xxx.git")])]),s._v(" "),a("blockquote",[a("p",[s._v("如果你这是一次性，并且很快就提交了，可以忽略此步，但不建议")])])]),s._v(" "),a("li",[a("p",[s._v("建立一个分支,修改代码：在本地可以修改你的代码(最好是在分支上修改代码,方便主支拉取最新源码,执行变基,PR 不会造成冲突)")]),s._v(" "),a("blockquote",[a("p",[s._v("任何时候在提交 PR 前，其他 PR 在一段时间没有被接受时都应该：")]),s._v(" "),a("ol",[a("li",[s._v("git fetch 源码仓库")]),s._v(" "),a("li",[s._v("git rebase 源码仓库/master")]),s._v(" "),a("li",[s._v("如果不冲突，就直接 git push; 如果冲突，就解决冲突，然后 git push")]),s._v(" "),a("li",[s._v("此时的 PR 代码可以直接被合并，现在去提交 PR，也不会冲突了。")])])])]),s._v(" "),a("li",[a("p",[s._v("提交代码到你自己的仓库：将修改好的代码先提交到你自己的仓库中")])]),s._v(" "),a("li",[a("p",[s._v("提交 PR：在你自己的仓库中，将改动的那部分内容，向原项目仓库中提交一个请求（PR），申请将这部分改动合并到主仓库中如果顺利的话，原仓库的维护者会接收你的 PR 的，但是通常不会那么顺利（原因有很多种）")])]),s._v(" "),a("li",[a("p",[s._v("合并之后: 拉取最新的源码,自己的分支可删可不删.(如果 PR merge 后，会给出一个删除你项目中分支的操作，可直接点击。)")])])]),s._v(" "),a("h2",{attrs:{id:"git-变基与合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-变基与合并"}},[s._v("#")]),s._v(" Git 变基与合并")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("合并就是将两个 commit 合并成一个新的 commit,即 A + B = C")])]),s._v(" "),a("li",[a("p",[s._v("变基是将 B 基于 A1 主支的分支变成基于 A2 主支的分支")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);