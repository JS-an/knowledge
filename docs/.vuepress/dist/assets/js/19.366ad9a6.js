(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{374:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"理解-typescript-配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解-typescript-配置文件"}},[t._v("#")]),t._v(" 理解 Typescript 配置文件")]),t._v(" "),a("p",[t._v("TS 使用 tsconfig.json 作为其配置文件，它主要包含两块内容：")]),t._v(" "),a("ol",[a("li",[t._v("指定待编译的文件")]),t._v(" "),a("li",[t._v("定义编译选项")])]),t._v(" "),a("blockquote",[a("p",[t._v("另外，一般来说，tsconfig.json 文件所处的路径就是当前 TS 项目的根路径。")])]),t._v(" "),a("h3",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),a("p",[t._v("TS 的编译命令为 tsc ，当我们在命令行中直接输入 tsc 时，会打印出如下的使用说明：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ tsc\nVersion "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.7")]),t._v(".2\nSyntax:   tsc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nExamples: tsc hello.ts\n          tsc --outFile file.js file.ts\n          tsc @args.txt\n\nOptions:\n-h, --help                                         Print this message.\n--all                                              Show all compiler options.\n-v, --version                                      Print the compiler's version.\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("如果仅仅是编译少量的文件，我们可以直接使用 tsc ，通过其选项来设置编译配置，如：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("tsc --outFile file.js --target es3 --module commonjs file.ts\n")])])]),a("p",[t._v("但如果是编译整个项目的话，最推荐的做法是使用 tsconfig.json 文件，这样就不用每次编译时都还得手动敲配置，而且也便于团队协作。")]),t._v(" "),a("p",[t._v("以下是让 tsc 使用 tsconfig.json 的两种方式：")]),t._v(" "),a("ol",[a("li",[t._v("不显式指定 tsconfig.json ，此时，编译器会从当前路径开始寻找 tsconfig.json 文件，如果没有找到，则继续往上级路径逐步寻找，直到找到为止")]),t._v(" "),a("li",[t._v("通过 --project （或缩写 -p ）指定一个包含 tsconfig.json 的路径，或者包含配置信息的 .json 文件路径")])]),t._v(" "),a("blockquote",[a("p",[t._v("注意，tsc 的命令行选项具有优先级，会覆盖 tsconfig.json 中的同名选项。")])]),t._v(" "),a("h3",{attrs:{id:"使用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用示例"}},[t._v("#")]),t._v(" 使用示例")]),t._v(" "),a("p",[t._v("下面是一个简单的配置示例：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"compilerOptions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"module"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commonjs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"noImplicitAny"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"removeComments"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"preserveConstEnums"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sourceMap"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app.ts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo.ts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其中，compilerOptions 用来配置编译选项，files 用来指定待编译文件。\n这里的待编译文件是指入口文件，任何被入口文件依赖的文件，比如 foo.ts 依赖 bar.ts ，那这里并不需要写上 bar.ts ，编译器会自动把所有的依赖文件纳为编译对象。")]),t._v(" "),a("p",[t._v("也可以使用 include 和 exclude 来指定和排除待编译文件：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"compilerOptions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"module"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commonjs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"noImplicitAny"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"removeComments"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"preserveConstEnums"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sourceMap"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"include"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src/**/*"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exclude"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node_modules"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**/*.spec.ts"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("所以，总结一下，指定待编译文件有两种方式：")]),t._v(" "),a("ol",[a("li",[t._v("使用 files 属性")]),t._v(" "),a("li",[t._v("使用 include 和 exclude 属性")])]),t._v(" "),a("blockquote",[a("p",[t._v("开发者可以按照自己的喜好使用其中任意一种。但它们不是互斥的，在某些情况下两者搭配起来使用效果更佳。")])]),t._v(" "),a("h3",{attrs:{id:"配置说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置说明"}},[t._v("#")]),t._v(" 配置说明")]),t._v(" "),a("h4",{attrs:{id:"文件指定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件指定"}},[t._v("#")]),t._v(" 文件指定")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("files 属性是一个数组，数组元素可以是相对文件路径和绝对文件路径。")])]),t._v(" "),a("li",[a("p",[t._v("include 和 exclude 属性也是一个数组，但数组元素是类似 glob 的文件模式。它支持的 glob 通配符包括：")])])]),t._v(" "),a("blockquote",[a("p",[t._v("* ：匹配 0 或多个字符（注意：不含路径分隔符）\n? ：匹配任意单个字符（注意：不含路径分隔符）\n**/ ：递归匹配任何子路径")])]),t._v(" "),a("ul",[a("li",[t._v("在继续说明之前，有必要先了解下在编译器眼里什么样的文件才算是 TS 文件。")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("TS 文件指拓展名为 .ts、.tsx 或 .d.ts 的文件。如果开启了 allowJs 选项，那 .js 和 .jsx 文件也属于 TS 文件。")])]),t._v(" "),a("li",[a("p",[t._v("如果仅仅包含一个 * 或者 .* ，那么只有TS 文件才会被包含。")])]),t._v(" "),a("li",[a("p",[t._v("如果 files 和 include 都未设置，那么除了 exclude 排除的文件，编译器会默认包含路径下的所有 TS 文件。")])]),t._v(" "),a("li",[a("p",[t._v("如果同时设置 files 和 include ，那么编译器会把两者指定的文件都引入。")])]),t._v(" "),a("li",[a("p",[t._v("如果未设置 exclude ，那其默认值为 node_modules 、bower_components、jspm_packages 和编译选项 outDir 指定的路径。")])]),t._v(" "),a("li",[a("p",[t._v("exclude 只对 include 有效，对 files 无效。即 files 指定的文件如果同时被 exclude 排除，那么该文件仍然会被编译器引入。")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("前面提到，任何被 files 或 include 引入的文件的依赖会被自动引入。\n反过来，如果 B.ts 被 A.ts 依赖，那么 B.ts 不能被 exclude 排除，除非 A.ts 也被排除了。")])]),t._v(" "),a("li",[a("p",[t._v("有一点要注意的是，编译器不会引入疑似为输出的文件。比如，如果引入的文件中包含 index.ts ，那么 index.d.ts 和 index.js 就会被排除。通常来说，只有拓展名不一样的文件命名法是不推荐的。")])]),t._v(" "),a("li",[a("p",[t._v("tsconfig.json 也可以为空文件，这种情况下会使用默认的编译选项来编译所有默认引入的文件。")])])]),t._v(" "),a("h4",{attrs:{id:"编译选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译选项"}},[t._v("#")]),t._v(" 编译选项")]),t._v(" "),a("h5",{attrs:{id:"常用选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用选项"}},[t._v("#")]),t._v(" 常用选项")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("选项字段")]),t._v(" "),a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("默认值")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("allowJs")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("允许编译 JS 文件")])]),t._v(" "),a("tr",[a("td",[t._v("checkJs")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("报告 JS 文件中存在的类型错误需要配合 allowJs 使用")])]),t._v(" "),a("tr",[a("td",[t._v("declaration")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false\t生成对应的 .d.ts 文件")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("declarationDir")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("生成的 .d.ts 文件存放路径默认与 .ts 文件相同")])]),t._v(" "),a("tr",[a("td",[t._v("experimentalDecorators")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("启用实验功能-ES 装饰器")])]),t._v(" "),a("tr",[a("td",[t._v("jsx")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("Preserve")]),t._v(" "),a("td",[t._v("在 .tsx 中支持 JSX ：React 或 Preserve ，详细说明")])]),t._v(" "),a("tr",[a("td",[t._v("jsxFactory")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("React.createElement")]),t._v(" "),a("td",[t._v("jsx 设置为 React 时使用的创建函数")])]),t._v(" "),a("tr",[a("td",[t._v("lib")]),t._v(" "),a("td",[t._v("string[]")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v('编译时引入的 ES 功能库，包括：es5 、es6、es7、dom 等。如果未设置，则默认为： target 为 es5 时: ["dom", "es5", "scripthost"] target 为 es6 时: ["dom", "es6", "dom.iterable", "scripthost"]')])]),t._v(" "),a("tr",[a("td",[t._v("module")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v('target === "es3" or "es5" ?"commonjs" : "es6"')]),t._v(" "),a("td",[t._v("生成的模块形式：none、commonjs、amd、system、umd、es6、es2015 或 esnext 只有 amd 和 system 能和 outFile 一起使用 target 为 es5 或更低时可用 es6 和 es2015")])]),t._v(" "),a("tr",[a("td",[t._v("moduleResolution")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v('module === "amd" or "system" or "es6" ? "classic" : "node"')]),t._v(" "),a("td",[t._v("模块解析方式，详细说明")])]),t._v(" "),a("tr",[a("td",[t._v("noImplicitAny")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("存在隐式 any 时抛错")])]),t._v(" "),a("tr",[a("td",[t._v("noImplicitReturns")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("不存在 return 时抛错")])]),t._v(" "),a("tr",[a("td",[t._v("noImplicitThis")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("this 可能为 any 时抛错")])]),t._v(" "),a("tr",[a("td",[t._v("outDir")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("编译生成的文件存放路径默认与 .ts 文件相同")])]),t._v(" "),a("tr",[a("td",[t._v("sourceMap")]),t._v(" "),a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("生成 .map 文件")])]),t._v(" "),a("tr",[a("td",[t._v("target")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td",[t._v("es3")]),t._v(" "),a("td",[t._v("生成 .js 文件版本")])])])]),t._v(" "),a("p",[t._v("附："),a("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方完整的编译选项列表"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"类型相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型相关"}},[t._v("#")]),t._v(" 类型相关")]),t._v(" "),a("ul",[a("li",[t._v("类型相关的选项包括 typeRoots 和 types 。")])]),t._v(" "),a("p",[t._v("有一个普遍的误解，以为这两个选项适用于所有的类型声明文件，包括用户自定义的声明文件。其实不然。\n这两个选项只对通过 npm 安装的声明模块有效，用户自定义的类型声明文件与它们没有任何关系。")]),t._v(" "),a("p",[t._v("声明模块通常会包含一个 index.d.ts 文件，或者其 package.json 设置了 types 字段。")]),t._v(" "),a("p",[t._v("默认的，所有位于 node_modules/@types 路径下的模块都会引入到编译器。\n具体来说是，./node_modules/@types 、../node_modules/@types、../../node_modules/@types 等等。")]),t._v(" "),a("ul",[a("li",[t._v("typeRoots 用来指定默认的类型声明文件查找路径，默认为 node_modules/@types 。比如:")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"compilerOptions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typeRoots"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./typings"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面的配置会自动引入 ./typings 下的所有 TS 类型声明模块，而不是 ./node_modules/@types 下的模块。")]),t._v(" "),a("ul",[a("li",[t._v("如果不希望自动引入 typeRoots 指定路径下的所有声明模块，那可以使用 types 指定自动引入哪些模块。比如：")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"compilerOptions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"types"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lodash"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"express"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("只会引入 node 、 lodash 和 express 三个声明模块，其它的声明模块则不会被自动引入。\n如果 types 被设置为 [] ，那么将不会自动引入任何声明模块。此时，如果想使用声明模块，只能在代码中手动引入了。")]),t._v(" "),a("blockquote",[a("p",[t._v("请记住，自动引入只对包含全局声明的模块有效。比如 jQuery ，我们不用手动 import 或者 ///"),a("reference"),t._v(" 即可在任何文件中使用 $ 的类型。再比如，对于 import 'foo' ，编译器会分别在 node_modules 和 node_modules/@types 文件下查找 foo 模块和声明模块。")],1)]),t._v(" "),a("p",[t._v("基于此，如果想让自定义声明的类型不需要手动引入就可以在任何地方使用，可以将其声明为全局声明 global ，然后让 files 或者 include 包含即可。")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" global "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("graphql")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("query"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TemplateStringsArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" Gatsby "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ComponentProps")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReactNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RootQueryType\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这样的话，就可以在任何地方直接使用 graphql 和 Gatsby 对应的类型了。")]),t._v(" "),a("h4",{attrs:{id:"配置复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置复用"}},[t._v("#")]),t._v(" 配置复用")]),t._v(" "),a("p",[t._v("可以使用 extends 来实现配置复用，即一个配置文件可以继承另一个文件的配置属性。")]),t._v(" "),a("p",[t._v("比如，建立一个基础的配置文件 configs/base.json ：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"compilerOptions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"noImplicitAny"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"strictNullChecks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("然后，tsconfig.json 就可以引用这个文件的配置了：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extends"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./configs/base"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main.ts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supplemental.ts"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这种继承有两种特点：")]),t._v(" "),a("ol",[a("li",[t._v("继承者中的同名配置会覆盖被继承者")]),t._v(" "),a("li",[t._v("所有相对路径都被解析为其所在文件的路径")])])])}),[],!1,null,null,null);s.default=e.exports}}]);